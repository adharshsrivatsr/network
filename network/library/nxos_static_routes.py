#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for nxos_static_routes
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
  'metadata_version': '1.1',
  'status': ['preview'],
  'supported_by': 'network'
}

DOCUMENTATION = """
---
module: nxos_static_routes
version_added: "2.10"
short_description: Configures and manages attributes of static routes on Cisco NX-OS platforms.
description: This module configures and manages the attributes of static routes on Cisco NX-OS platforms.
author: Adharsh Srivats Rangarajan (@adharshsrivatsr)
notes:
  - Tested against NX-OS 7.3.(0)D1(1) on VIRL
  - To parse configuration text, provide the output of show running-config | section interface  or a mocked up config
options:
  running_config:
    description:
      - Used to parse given commands into structured format, only in parsed state
    type: str
  config:
    description:
      - A list of configurations for static routes
    type: list
    elements: dict
    suboptions:
      vrf:
        description:
          - The VRF to which the static route(s) belong
        type: str
        default: __global__
      address_families:
        description: A dictionary specifying the address family to which the static route(s) belong.
        type: list
        elements: dict
        suboptions:
          afi:
            description:
              - Specifies the top level address family indicator.
            type: str
            choices: ['ipv4', 'ipv6']
            required: True
          routes:
            description: A dictionary that specifies the static route configurations
            elements: dict
            type: list
            suboptions:
              dest:
                description: 
                  - Destination prefix of static route
                  - The address format is <ipv4/v6 address>/<mask>
                  - The mask is number in range 0-32 for IPv4 and in range 0-128 for IPv6
                type: str
                required: True
              next_hops: 
                description: 
                  - Details of route to be taken
                type: list
                elements: dict
                suboptions:
                  forward_router_address:
                    description:
                      - IP address of the next hop router
                    type: str
                    required: True
                  interface:
                    description:
                      - Outgoing interface to take. For anything except 'null0', then next hop IP address should also be configured.
                    type: str
                  admin_distance:
                    description: 
                      - Preference or administrative distance of route (range 1-255)
                    type: int
                  route_name:
                    description:
                      - Name of the static route
                    type: str
                  tag:
                    description:
                      - Route tag value (numeric)
                    type: int
                  track:
                    description:
                      - Track value (range 1 - 512). Track must already be configured on the device before adding the route.
                    type: int
                  vrf:
                    description:
                      - VRF of the destination
                    type: str
  state:
    description:
      - The state the configuration should be left in
    type: str
    choices:
      - deleted
      - merged
      - overridden
      - replaced
      - gathered
      - rendered
      - parsed
    default:
      - merged
"""
EXAMPLES = """
# Using deleted:

# Before state:
# -------------
#
# ip route 12.12.12.0/24 192.168.12.2 name new_route
# ip route 12.12.13.0/24 192.168.12.3 tag 12 

- name: Delete static route configuration
  nxos_static_routes:
    state: deleted

# After state:
# ------------
#


# Using deleted

# Before state:
# -------------
#
# ip route 12.12.13.0/24 192.168.12.3 tag 12

- name: Merge new static route configuration
  nxos_static_routes:
    config:
      - vrf: Test1
        address_families:
          - afi: ipv4
            routes:
              - dest: 15.15.15.15/24
                next_hop: 
                  - forward_router_address: 193.145.98.12
                    pref: 5                
                  - forward_router_address: 178.12.112.24
                    vrf: Trial

          - afi: ipv4
            routes:
              dest: 13.13.13.13/24
              next_hop:
                - interface: Null0
      
      - address_families:
          - afi: ipv4
            routes:
              - dest: 12.12.12.12/24
                next_hop:
                  - forward_router_address: 193.145.98.12
                    route_name: new_route
    state:
        - merged

# After state:
# ------------
#
# ip route 12.12.13.0/24 192.168.12.3 tag 12
# ip route 12.12.12.0/24 193.145.98.12 name new_route
#
# vrf context Test1
# ip route 15.15.15.15/24 193.145.98.12 5
# ip route 15.15.15.15/24 178.12.112.24 vrf Trial
# ip route 13.13.13.13/24 Null0


# Using overridden:

# Before state:
# -------------
#
# ip route 12.12.12.0/24 192.168.12.2 name new_route
# ip route 12.12.13.0/24 192.168.12.3 tag 12
# ip route 15.15.15.0/24 193.145.98.12 5

- name: Overriden existing static route configuration with new configuration
  nxos_static_routes:
    config:
      - address_families:
          - afi: ipv6
            routes:
              - dest: 4011:0DB1::/48              
                next_hop:
                  - interface: null0
    state: 
        - overridden
    
# After state:
# ------------
#
# ipv6 route 4011:0DB1::/48 Null0


# Using replaced:

# Before state:
#
# ip route 12.12.12.12/24 192.168.121.1 
# ip route 12.12.12.12/24 192.168.123.45 5
# ip route 12.12.12.12/24 192.168.124.5 10
# ip route 12.12.13.0/24 192.168.12.3 tag 12
# ip route 15.15.15.0/24 193.145.98.12 5

- name: Replaced the existing static configuration of a prefix with new configuration
  nxos_static_routes:
    config:
      - address_families:
          - afi: ipv4
            routes:
              - dest: 12.12.12.12/24
                next_hop:
                  - ip: 195.134.175.12
                    route_name: replaced_route
    state:
        - replaced

# After state:
#
# ip route 12.12.12.0/24 195.135.175.12 name replaced_route
# ip route 12.12.13.0/24 192.168.12.3 tag 12
# ip route 15.15.15.0/24 193.145.98.12 5


# Using gathered:

# Before state:
#
# ipv6 route 4011::0db1/128 6::6 
# vrf context Test
#    ip route 12.12.12.0/24 192.168.121.1 
#    ip route 12.12.12.0/24 192.168.123.45 5

- name: Gather the exisitng condiguration
  nxos_static_routes:
    state: gathered

# After state:
#
# ipv6 route 4011::0db1/128 6::6 
# vrf context Test
#   ip route 12.12.12.0/24 192.168.121.1 
#   ip route 12.12.12.0/24 192.168.123.45 5

# returns:
# 
#  nxos_static_routes:
#    config:
#        -   vrf: Test
#            address_families:
#               -   afi: ipv4
                    routes:
#                   -   dest: 12.12.12.0/24
#                       next_hop: 
#                            -   forward_router_address: 192.168.121.1 
#
#                            -   forward_router_address: 192.168.123.45
#                                pref: 5
#
#        -   address_families:
                - afi: ipv6
#                 routes:
#                     -   dest: 4011::0db1/128
#                         next_hop:
#                             -   forward_router_address: 6::6
#


# Using rendered:

# Before state:
#
#

- name: Render required configuration to be pushed to the device
  nxos_static_routes:
    config:
        - vrf: 123
          address_families:
            - afi: ipv4  
              routes:
                    - dest: 14.14.14.14/24
                      next_hop:
                        -   forward_router_address: 192.112.134.78

    state: rendered

# After state:
# -----------
#


# returns
# commands:
# vrf context 123
# ip route 14.14.14.14/24 192.112.134.78


# Using parsed
#
# Before state:
# -------------
# 

- name: Parse the config to structured data
  nxos_static_routes:
    running_config: |
        ipv6 route 4011::0db1/128 6::6 
        vrf context Test
           ip route 12.12.12.0/24 192.168.121.1 
           ip route 12.12.12.0/24 192.168.123.45 5

# After state:
# ------------
#

#returns
#after:
#    -   vrf: Test
#        address_families:
#            -   afi: ipv4
#                routes:
#                -   dest: 12.12.12.0/24
#                    next_hop: 
#                        -   forward_router_address: 192.168.121.1 
#    
#                        -   forward_router_address: 192.168.123.45
#                            pref: 5
#    
#    -   address_families:
#            - afi: ipv6
#                routes:
#                    -   dest: 4011::0db1/128
#                        next_hop:
#                            -   forward_router_address: 6::6


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.nxos.argspec.static_routes.static_routes import Static_routesArgs
from ansible.module_utils.network.nxos.config.static_routes.static_routes import Static_routes


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Static_routesArgs.argument_spec,
                           supports_check_mode=True)

    result = Static_routes(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
