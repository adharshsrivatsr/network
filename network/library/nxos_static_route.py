#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for nxos_static_route
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
  'metadata_version': '1.1',
  'status': ['preview'],
  'supported_by': 'network'
}

DOCUMENTATION = """
---
module: nxos_static_route
version_added: 2.10
short_description: Configures and manages attributes of static routes on NX-OS platforms.
description: This module configures and manages the attributes of static routes on NX-OS platforms.
author: Adharsh Srivats Rangarajan (adharshsrivatsr)
notes:
  - Tested against NX-OS 7.3.(0)D1(1) on VIRL
options:
  config:
    description:
      - A list of configurations for static routes
    type: list
    elements: dict
    suboptions:
      prefix:
        description: 
          - Destination prefix of static route
          - The address format is <ipv4/v6 address>/<mask>
          - The mask is number in range 0-32 for IPv4 and in range 0-128 for IPv6
        required: true
      next_hop: 
        description: 
          - Details of route to be taken
        type: list
        elements: dict
        suboptions:
          ip:
            description:
              - IP address of the next hop
            type: str
          interface:
            description:
              - Outgoing interface to take. If anything except 'null0' is given, then next hop IP address should also be configured.
            type: str
          pref:
            description: 
              - Preference or administrative difference of route (range 1-255)
            type: int
          route_name:
            description:
              - Name of the static route
            type: str
          tag:
            description:
              - Route tag value (numeric)
            type: int
          track:
            description:
              - Track value (range 1 - 512). Track must already be configured on the device before adding the route.
            type: int
          vrf:
            description:
              - VRF for static route
            type: str
  state:
    description:
      - The state the configuration should be left in
    type: str
    choices:
      - deleted
      - merged
      - overridden
      - replaced
    default:
      - merged
"""
EXAMPLES = """
# Using deleted:

# Before state:
# -------------
#
# ip route 12.12.12.0/24 192.168.12.2 name new_route
# ip route 12.12.13.0/24 192.168.12.3 tag 12 

- name: Delete static route configuration
  nxos_static_route:
    state: deleted

# After state:
# ------------
#


# Using deleted

# Before state:
# -------------
#
# ip route 12.12.12.0/24 192.168.12.2 name new_route
# ip route 12.12.13.0/24 192.168.12.3 tag 12

- name: Merge new static route configuration
  nxos_static_route:
    config:
        - prefix: 15.15.15.0/24
          next_hop: 
            ip: 193.145.98.12
            pref: 5
        
        - prefix: 0.0.0.0/0 
          next_hop:
            interface: eth1/2
            ip: 193.167.124.12
    state:
        - merged

# After state:
# ------------
#
# ip route 12.12.12.0/24 192.168.12.2 name new_route
# ip route 12.12.13.0/24 192.168.12.3 tag 12
# ip route 15.15.15.0/24 193.145.98.12 5
# ip route 0.0.0.0/0 193.167.124.12


# Using overridden:

# Before state:
# -------------
#
# ip route 12.12.12.0/24 192.168.12.2 name new_route
# ip route 12.12.13.0/24 192.168.12.3 tag 12
# ip route 15.15.15.0/24 193.145.98.12 5

- name: Overriden existing static route configuration with new configuration
  nxos_static_route:
    config:
        - prefix: 13.13.13.13/16 
          next_hop: 
            ip: 192.168.12.2
            track: 100
    state: 
        - overridden
    
# After state:
# ------------
#
# ip route 13.13.13.13/16 192.168.12.2 track 100


# Using replaced:

# Before state:
#
# ip route 12.12.12.12/24 192.168.121.1 
# ip route 12.12.12.12/24 192.168.123.45 5
# ip route 12.12.12.12/24 192.168.124.5 10
# ip route 12.12.13.0/24 192.168.12.3 tag 12
# ip route 15.15.15.0/24 193.145.98.12 5

- name: Replaced the existing static configuration of a prefix with new configuration
  nxos_static_route:
    config:
        - prefix: 12.12.12.12/24
          next_hop:
            ip: 195.134.175.12
            route_name: replaced_route
    state:
        - replaced

# After state:
#
# ip route 12.12.13.0/24 192.168.12.3 tag 12
# ip route 15.15.15.0/24 193.145.98.12 5
# ip route 12.12.12.12/24 195.134.175.12 name replaced_route


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.nxos.argspec.static_route.static_route import Static_routeArgs
from ansible.module_utils.network.nxos.config.static_route.static_route import Static_route


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Static_routeArgs.argument_spec,
                           supports_check_mode=True)

    result = Static_route(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
